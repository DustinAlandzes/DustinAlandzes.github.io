/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 room.glb --types --transform 
Files: room.glb [27.41KB] > /Users/dustinalandzes/PycharmProjects/DustinAlandzes.github.io/frontend/public/room-transformed.glb [3.28KB] (88%)
*/

import * as THREE from 'three'
import {MeshPhongMaterial} from 'three'
import React from 'react'
import {useGLTF, useTexture} from '@react-three/drei'
import {GLTF} from 'three-stdlib'

type GLTFResult = GLTF & {
    nodes: {
        Room: THREE.Mesh
        Window: THREE.Mesh
    }
    materials: {
        Material: THREE.MeshStandardMaterial
    }
}

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

export default function Model(props: JSX.IntrinsicElements['group']) {
    const {nodes, materials} = useGLTF('/room-transformed.glb') as GLTFResult
    const transparentMaterial = new MeshPhongMaterial({transparent: true, opacity: 0.3})

    const marbleTextureProps = useTexture({
        map: 'Marble015_1K-JPG/Marble015_1K-JPG_Color.jpg',
        //displacementMap: 'Marble015_1k-JPG/Marble015_1K-JPG_Displacement.jpg',
        normalMap: 'Marble015_1K-JPG/Marble015_1K-JPG_NormalGL.jpg',
        roughnessMap: 'Marble015_1K-JPG/Marble015_1K-JPG_Roughness.jpg',
        //aoMap: 'Marble015_1k-JPG/Marble015_1K-JPG_AmbientOcclusion.jpg',
    })

    return (
        <group {...props} dispose={null}>
            <mesh geometry={nodes.Room.geometry} scale={[4.267, 2.523, 4.204]}>
                <meshStandardMaterial {...marbleTextureProps}/>
            </mesh>
            <mesh geometry={nodes.Window.geometry} material={transparentMaterial} position={[-4.071, 0.368, -1.783]}
                  rotation={[-Math.PI, 0, 0]} scale={[-0.227, -1.476, -1.121]}/>
        </group>
    )
}

useGLTF.preload('/room-transformed.glb')
